openapi: 3.0.4
info:
  title: Together APIs
  description: The Together REST API. Please see https://docs.together.ai for more details.
  termsOfService: https://www.together.ai/terms-of-service
  contact:
    name: Together Support
    url: https://www.together.ai/contact
  license:
    name: MIT
    url: https://github.com/togethercomputer/openapi/blob/main/LICENSE
  version: 2.0.0
servers:
  - url: https://api.together.xyz/v1
paths:
  /audio/speech:
    post:
      tags:
        - Audio
      summary: Create audio generation request
      description: Generate audio from input text
      operationId: audio-speech
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AudioSpeechRequest'
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            audio/mpeg:
              schema:
                type: string
                format: binary
            audio/wav:
              schema:
                type: string
                format: binary
            text/event-stream:
              schema:
                $ref: '#/components/schemas/AudioSpeechStreamResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '429':
          description: RateLimit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
  /chat/completions:
    post:
      tags:
        - Chat
      summary: Create chat completion
      description: Query a chat model.
      operationId: chat-completions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCompletionRequest'
      responses:
        '200':
          description: '200'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletionResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ChatCompletionStream'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '404':
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '429':
          description: RateLimit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '503':
          description: Overloaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '504':
          description: Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
  /completions:
    post:
      tags:
        - Completion
      summary: Create completion
      description: 'Query a language, code, or image model.'
      operationId: completions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionRequest'
      responses:
        '200':
          description: '200'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletionResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/CompletionStream'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '404':
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '429':
          description: RateLimit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '503':
          description: Overloaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '504':
          description: Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
  /embeddings:
    post:
      tags:
        - Embeddings
      summary: Create embedding
      description: Query an embedding model for a given string of text.
      operationId: embeddings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbeddingsRequest'
      responses:
        '200':
          description: '200'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingsResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '404':
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '429':
          description: RateLimit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '503':
          description: Overloaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '504':
          description: Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
  /files:
    get:
      tags:
        - Files
      summary: List all files
      description: List the metadata for all uploaded data files.
      responses:
        '200':
          description: List of files
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileList'
  '/files/{id}':
    delete:
      tags:
        - Files
      summary: Delete a file
      description: Delete a previously uploaded data file.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDeleteResponse'
    get:
      tags:
        - Files
      summary: List file
      description: List the metadata for a single uploaded data file.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponse'
  '/files/{id}/content':
    get:
      tags:
        - Files
      summary: Get file contents
      description: Get the contents of a single uploaded data file.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File content retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileObject'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
  /fine-tunes:
    get:
      tags:
        - Fine-tuning
      summary: List all jobs
      description: List the metadata for all fine-tuning jobs.
      responses:
        '200':
          description: List of fine-tune jobs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinetuneList'
    post:
      tags:
        - Fine-tuning
      summary: Create job
      description: Use a model to create a fine-tuning job.
      requestBody:
        content:
          application/json:
            schema:
              required:
                - training_file
                - model
              type: object
              properties:
                batch_size:
                  type: integer
                  description: Batch size for fine-tuning
                  default: 32
                learning_rate:
                  type: number
                  description: Learning rate multiplier to use for training
                  format: float
                  default: 1E-05
                lr_scheduler:
                  $ref: '#/components/schemas/LRScheduler'
                max_grad_norm:
                  type: number
                  description: Max gradient norm to be used for gradient clipping. Set to 0 to disable.
                  format: float
                  default: 1
                model:
                  type: string
                  description: Name of the base model to run fine-tune job on
                n_checkpoints:
                  type: integer
                  description: Number of checkpoints to save during fine-tuning
                  default: 1
                n_epochs:
                  type: integer
                  description: Number of epochs for fine-tuning
                  default: 1
                n_evals:
                  type: integer
                  description: Number of evaluations to be run on a given validation set during training
                  default: 0
                suffix:
                  type: string
                  description: Suffix that will be added to your fine-tuned model name
                train_on_inputs:
                  type: boolean
                  oneOf:
                    - type: boolean
                    - enum:
                        - auto
                      type: string
                  description: Whether to mask the user messages in conversational data or prompts in instruction data.
                  default: auto
                training_file:
                  type: string
                  description: File-ID of a training file uploaded to the Together API
                training_type:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/FullTrainingType'
                    - $ref: '#/components/schemas/LoRATrainingType'
                validation_file:
                  type: string
                  description: File-ID of a validation file uploaded to the Together API
                wandb_api_key:
                  type: string
                  description: API key for Weights & Biases integration
                wandb_base_url:
                  type: string
                  description: The base URL of a dedicated Weights & Biases instance.
                wandb_name:
                  type: string
                  description: The Weights & Biases name for your run.
                wandb_project_name:
                  type: string
                  description: 'The Weights & Biases project for your run. If not specified, will use `together` as the project name.'
                warmup_ratio:
                  type: number
                  description: The percent of steps at the start of training to linearly increase the learning rate.
                  format: float
                  default: 0
                weight_decay:
                  type: number
                  description: Weight decay
                  format: float
                  default: 0
        required: true
      responses:
        '200':
          description: Fine-tuning job initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinetuneResponse'
  '/fine-tunes/{id}':
    get:
      tags:
        - Fine-tuning
      summary: List job
      description: List the metadata for a single fine-tuning job.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Fine-tune job details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinetuneResponse'
  '/fine-tunes/{id}/cancel':
    post:
      tags:
        - Fine-tuning
      summary: Cancel job
      description: Cancel a currently running fine-tuning job.
      parameters:
        - name: id
          in: path
          description: Fine-tune ID to cancel. A string that starts with `ft-`.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully cancelled the fine-tuning job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinetuneResponse'
        '400':
          description: Invalid request parameters.
        '404':
          description: Fine-tune ID not found.
  '/fine-tunes/{id}/events':
    get:
      tags:
        - Fine-tuning
      summary: List job events
      description: List the events for a single fine-tuning job.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of fine-tune events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinetuneListEvents'
  /finetune/download:
    get:
      tags:
        - Fine-tuning
      summary: Download model
      description: Download a compressed fine-tuned model or checkpoint to local disk.
      parameters:
        - name: ft_id
          in: query
          description: Fine-tune ID to download. A string that starts with `ft-`.
          required: true
          schema:
            type: string
        - name: checkpoint_step
          in: query
          description: Specifies step number for checkpoint to download. Ignores `checkpoint` value if set.
          schema:
            type: integer
        - name: checkpoint
          in: query
          description: Specifies checkpoint type to download - `merged` vs `adapter`. This field is required if the checkpoint_step is not set.
          schema:
            enum:
              - merged
              - adapter
            type: string
        - name: output
          in: query
          description: 'Specifies output file name for downloaded model. Defaults to `$PWD/{model_name}.{extension}`.'
          schema:
            type: string
      responses:
        '200':
          description: Successfully downloaded the fine-tuned model or checkpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinetuneDownloadResult'
        '400':
          description: Invalid request parameters.
        '404':
          description: Fine-tune ID not found.
  /images/generations:
    post:
      tags:
        - Images
      summary: Create image
      description: Use an image model to generate an image for a given prompt.
      requestBody:
        content:
          application/json:
            schema:
              required:
                - prompt
                - model
              type: object
              properties:
                guidance:
                  type: number
                  description: 'Adjusts the alignment of the generated image with the input prompt. Higher values (e.g., 8-10) make the output more faithful to the prompt, while lower values (e.g., 1-5) encourage more creative freedom.'
                  default: 3.5
                height:
                  type: integer
                  description: Height of the image to generate in number of pixels.
                  default: 1024
                image_loras:
                  type: array
                  items:
                    required:
                      - path
                      - scale
                    type: object
                    properties:
                      path:
                        type: string
                        description: The URL of the LoRA to apply (e.g. https://huggingface.co/strangerzonehf/Flux-Midjourney-Mix2-LoRA).
                      scale:
                        type: number
                        description: The strength of the LoRA's influence. Most LoRA's recommend a value of 1.
                  description: An array of objects that define LoRAs (Low-Rank Adaptations) to influence the generated image.
                image_url:
                  type: string
                  description: URL of an image to use for image models that support it.
                model:
                  type: string
                  anyOf:
                    - enum:
                        - black-forest-labs/FLUX.1-schnell-Free
                        - black-forest-labs/FLUX.1-schnell
                        - black-forest-labs/FLUX.1.1-pro
                      type: string
                    - type: string
                  description: "The model to use for image generation.<br> <br> [See all of Together AI's image models](https://docs.together.ai/docs/serverless-models#image-models)\n"
                  example: black-forest-labs/FLUX.1-schnell
                n:
                  type: integer
                  description: Number of image results to generate.
                  default: 1
                negative_prompt:
                  type: string
                  description: The prompt or prompts not to guide the image generation.
                output_format:
                  enum:
                    - jpeg
                    - png
                  type: string
                  description: The format of the image response. Can be either be `jpeg` or `png`. Defaults to `jpeg`.
                  default: jpeg
                prompt:
                  type: string
                  description: A description of the desired images. Maximum length varies by model.
                  example: 'cat floating in space, cinematic'
                response_format:
                  enum:
                    - base64
                    - url
                  type: string
                  description: Format of the image response. Can be either a base64 string or a URL.
                seed:
                  type: integer
                  description: Seed used for generation. Can be used to reproduce image generations.
                steps:
                  type: integer
                  description: Number of generation steps.
                  default: 20
                width:
                  type: integer
                  description: Width of the image to generate in number of pixels.
                  default: 1024
        required: true
      responses:
        '200':
          description: Image generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageResponse'
  /models:
    get:
      tags:
        - Models
      summary: List all models
      description: Lists all of Together's open-source models
      operationId: models
      responses:
        '200':
          description: '200'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelInfoList'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '404':
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '429':
          description: RateLimit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '504':
          description: Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
  /rerank:
    post:
      tags:
        - Rerank
      summary: Create a rerank request
      description: Query a reranker model
      operationId: rerank
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RerankRequest'
      responses:
        '200':
          description: '200'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RerankResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '404':
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '429':
          description: RateLimit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '503':
          description: Overloaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
        '504':
          description: Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorData'
components:
  schemas:
    AudioSpeechRequest:
      required:
        - model
        - input
        - voice
      type: object
      properties:
        input:
          type: string
          description: Input text to generate the audio for
        language:
          enum:
            - en
            - de
            - fr
            - es
            - hi
            - it
            - ja
            - ko
            - nl
            - pl
            - pt
            - ru
            - sv
            - tr
            - zh
          type: string
          description: Language of input text
          default: en
        model:
          anyOf:
            - enum:
                - cartesia/sonic
              type: string
            - type: string
          description: "The name of the model to query.<br> <br> [See all of Together AI's chat models](https://docs.together.ai/docs/serverless-models#audio-models)\n"
          example: cartesia/sonic
        response_encoding:
          enum:
            - pcm_f32le
            - pcm_s16le
            - pcm_mulaw
            - pcm_alaw
          type: string
          description: Audio encoding of response
          default: pcm_f32le
        response_format:
          enum:
            - mp3
            - wav
            - raw
          type: string
          description: The format of audio output
          default: wav
        sample_rate:
          type: number
          description: Sampling rate to use for the output audio
          default: 44100
        stream:
          type: boolean
          description: 'If true, output is streamed for several characters at a time instead of waiting for the full response. The stream terminates with `data: [DONE]`. If false, return the encoded audio as octet stream'
          default: false
        voice:
          anyOf:
            - enum:
                - laidback woman
                - polite man
                - storyteller lady
                - friendly sidekick
              type: string
            - type: string
          description: 'The voice to use for generating the audio. [View all supported voices here](https://docs.together.ai/docs/text-to-speech#voices-available).'
    AudioSpeechStreamChunk:
      required:
        - object
        - model
        - b64
      type: object
      properties:
        b64:
          type: string
          description: base64 encoded audio stream
        model:
          type: string
          example: cartesia/sonic
        object:
          enum:
            - audio.tts.chunk
          type: string
    AudioSpeechStreamEvent:
      required:
        - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/AudioSpeechStreamChunk'
    AudioSpeechStreamResponse:
      oneOf:
        - $ref: '#/components/schemas/AudioSpeechStreamEvent'
        - $ref: '#/components/schemas/StreamSentinel'
    ChatCompletionAssistantMessageParam:
      required:
        - role
      type: object
      properties:
        content:
          type: string
          nullable: true
        function_call:
          required:
            - arguments
            - name
          type: object
          properties:
            arguments:
              type: string
            name:
              type: string
          deprecated: true
        name:
          type: string
        role:
          enum:
            - assistant
          type: string
        tool_calls:
          type: array
          items:
            $ref: '#/components/schemas/ToolChoice'
    ChatCompletionChoice:
      required:
        - index
        - delta
        - finish_reason
      type: object
      properties:
        delta:
          title: ChatCompletionChoiceDelta
          required:
            - role
          type: object
          properties:
            content:
              type: string
              nullable: true
            function_call:
              required:
                - arguments
                - name
              type: object
              properties:
                arguments:
                  type: string
                name:
                  type: string
              nullable: true
              deprecated: true
            role:
              enum:
                - system
                - user
                - assistant
                - function
                - tool
              type: string
            token_id:
              type: integer
            tool_calls:
              type: array
              items:
                $ref: '#/components/schemas/ToolChoice'
        finish_reason:
          $ref: '#/components/schemas/FinishReason'
        index:
          type: integer
        logprobs:
          $ref: '#/components/schemas/LogprobsPart'
    ChatCompletionChoicesData:
      type: array
      items:
        type: object
        properties:
          finish_reason:
            $ref: '#/components/schemas/FinishReason'
          index:
            type: integer
          logprobs:
            $ref: '#/components/schemas/LogprobsPart'
          message:
            $ref: '#/components/schemas/ChatCompletionMessage'
          seed:
            type: integer
          text:
            type: string
    ChatCompletionChunk:
      required:
        - id
        - object
        - created
        - choices
        - model
      type: object
      properties:
        choices:
          title: ChatCompletionChoices
          type: array
          items:
            required:
              - index
              - delta
              - finish_reason
            type: object
            properties:
              delta:
                title: ChatCompletionChoiceDelta
                required:
                  - role
                type: object
                properties:
                  content:
                    type: string
                    nullable: true
                  function_call:
                    required:
                      - arguments
                      - name
                    type: object
                    properties:
                      arguments:
                        type: string
                      name:
                        type: string
                    nullable: true
                    deprecated: true
                  role:
                    enum:
                      - system
                      - user
                      - assistant
                      - function
                      - tool
                    type: string
                  token_id:
                    type: integer
                  tool_calls:
                    type: array
                    items:
                      $ref: '#/components/schemas/ToolChoice'
              finish_reason:
                $ref: '#/components/schemas/FinishReason'
              index:
                type: integer
              logprobs:
                type: number
                nullable: true
              seed:
                type: integer
                nullable: true
        created:
          type: integer
        id:
          type: string
        model:
          type: string
          example: mistralai/Mixtral-8x7B-Instruct-v0.1
        object:
          enum:
            - chat.completion.chunk
          type: string
        system_fingerprint:
          type: string
        usage:
          $ref: '#/components/schemas/UsageData'
    ChatCompletionEvent:
      required:
        - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ChatCompletionChunk'
    ChatCompletionFunctionMessageParam:
      required:
        - content
        - role
        - name
      type: object
      properties:
        content:
          type: string
        name:
          type: string
        role:
          enum:
            - function
          type: string
      deprecated: true
    ChatCompletionMessage:
      required:
        - role
        - content
      type: object
      properties:
        content:
          type: string
          nullable: true
        function_call:
          required:
            - arguments
            - name
          type: object
          properties:
            arguments:
              type: string
            name:
              type: string
          deprecated: true
        role:
          enum:
            - assistant
          type: string
        tool_calls:
          type: array
          items:
            $ref: '#/components/schemas/ToolChoice'
    ChatCompletionMessageParam:
      oneOf:
        - $ref: '#/components/schemas/ChatCompletionSystemMessageParam'
        - $ref: '#/components/schemas/ChatCompletionUserMessageParam'
        - $ref: '#/components/schemas/ChatCompletionAssistantMessageParam'
        - $ref: '#/components/schemas/ChatCompletionToolMessageParam'
        - $ref: '#/components/schemas/ChatCompletionFunctionMessageParam'
    ChatCompletionRequest:
      required:
        - model
        - messages
      type: object
      properties:
        echo:
          type: boolean
          description: 'If true, the response will contain the prompt. Can be used with `logprobs` to return prompt logprobs.'
        frequency_penalty:
          type: number
          description: A number between -2.0 and 2.0 where a positive value decreases the likelihood of repeating tokens that have already been mentioned.
          format: float
        function_call:
          oneOf:
            - enum:
                - none
                - auto
              type: string
            - required:
                - name
              type: object
              properties:
                name:
                  type: string
        logit_bias:
          type: object
          additionalProperties:
            type: number
            format: float
          description: Adjusts the likelihood of specific tokens appearing in the generated output.
          example:
            '1024': -10.5
            '105': 21.4
        logprobs:
          maximum: 1
          minimum: 0
          type: integer
          description: Determines the number of most likely tokens to return at each token position log probabilities to return.
        max_tokens:
          type: integer
          description: The maximum number of tokens to generate.
        messages:
          type: array
          items:
            required:
              - role
              - content
            type: object
            properties:
              content:
                type: string
                oneOf:
                  - type: string
                    description: A plain text message.
                  - type: array
                    items:
                      type: object
                      oneOf:
                        - required:
                            - type
                            - text
                          type: object
                          properties:
                            text:
                              type: string
                            type:
                              enum:
                                - text
                              type: string
                        - required:
                            - type
                            - image_url
                          type: object
                          properties:
                            image_url:
                              required:
                                - url
                              type: object
                              properties:
                                url:
                                  type: string
                                  description: The URL of the image as a plain string.
                            type:
                              enum:
                                - image_url
                              type: string
                    description: A structured message with mixed content types.
                description: 'The content of the message, which can either be a simple string or a structured format.'
              role:
                enum:
                  - system
                  - user
                  - assistant
                  - tool
                type: string
                description: 'The role of the messages author. Choice between: system, user, or assistant.'
          description: A list of messages comprising the conversation so far.
        min_p:
          type: number
          description: A number between 0 and 1 that can be used as an alternative to top_p and top-k.
          format: float
        model:
          anyOf:
            - enum:
                - Qwen/Qwen2.5-72B-Instruct-Turbo
                - Qwen/Qwen2.5-7B-Instruct-Turbo
                - meta-llama/Meta-Llama-3.1-405B-Instruct-Turbo
                - meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo
                - meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo
              type: string
            - type: string
          description: "The name of the model to query.<br> <br> [See all of Together AI's chat models](https://docs.together.ai/docs/serverless-models#chat-models)\n"
          example: meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo
        n:
          maximum: 128
          minimum: 1
          type: integer
          description: The number of completions to generate for each prompt.
        presence_penalty:
          type: number
          description: A number between -2.0 and 2.0 where a positive value increases the likelihood of a model talking about new topics.
          format: float
        repetition_penalty:
          type: number
          description: A number that controls the diversity of generated text by reducing the likelihood of repeated sequences. Higher values decrease repetition.
        response_format:
          type: object
          properties:
            schema:
              type: object
              additionalProperties:
                type: string
              description: The schema of the response format.
            type:
              type: string
              description: The type of the response format.
              example: json
          description: An object specifying the format that the model must output.
        safety_model:
          type: string
          description: 'The name of the moderation model used to validate tokens. Choose from the available moderation models found [here](https://docs.together.ai/docs/inference-models#moderation-models).'
          example: safety_model_name
        seed:
          type: integer
          description: Seed value for reproducibility.
          example: 42
        stop:
          type: array
          items:
            type: string
          description: 'A list of string sequences that will truncate (stop) inference text output. For example, "</s>" will stop generation as soon as the model generates the given token.'
        stream:
          type: boolean
          description: 'If true, stream tokens as Server-Sent Events as the model generates them instead of waiting for the full model response. The stream terminates with `data: [DONE]`. If false, return a single JSON object containing the results.'
        temperature:
          type: number
          description: A decimal number from 0-1 that determines the degree of randomness in the response. A temperature less than 1 favors more correctness and is appropriate for question answering or summarization. A value closer to 1 introduces more randomness in the output.
          format: float
        tool_choice:
          oneOf:
            - type: string
              example: tool_name
            - $ref: '#/components/schemas/ToolChoice'
          description: 'Controls which (if any) function is called by the model. By default uses `auto`, which lets the model pick between generating a message or calling a function.'
        tools:
          type: array
          items:
            $ref: '#/components/schemas/ToolsPart'
          description: 'A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for.'
        top_k:
          type: integer
          description: 'An integer that''s used to limit the number of choices for the next predicted word or token. It specifies the maximum number of tokens to consider at each step, based on their probability of occurrence. This technique helps to speed up the generation process and can improve the quality of the generated text by focusing on the most likely options.'
          format: int32
        top_p:
          type: number
          description: A percentage (also called the nucleus parameter) that's used to dynamically adjust the number of choices for each predicted token based on the cumulative probabilities. It specifies a probability threshold below which all less likely tokens are filtered out. This technique helps maintain diversity and generate more fluent and natural-sounding text.
          format: float
    ChatCompletionResponse:
      required:
        - choices
        - id
        - created
        - model
        - object
      type: object
      properties:
        choices:
          $ref: '#/components/schemas/ChatCompletionChoicesData'
        created:
          type: integer
        id:
          type: string
        model:
          type: string
        object:
          enum:
            - chat.completion
          type: string
        usage:
          $ref: '#/components/schemas/UsageData'
    ChatCompletionStream:
      oneOf:
        - $ref: '#/components/schemas/ChatCompletionEvent'
        - $ref: '#/components/schemas/StreamSentinel'
    ChatCompletionSystemMessageParam:
      required:
        - content
        - role
      type: object
      properties:
        content:
          type: string
        name:
          type: string
        role:
          enum:
            - system
          type: string
    ChatCompletionToken:
      required:
        - id
        - text
        - logprob
        - special
      type: object
      properties:
        id:
          type: integer
        logprob:
          type: number
          format: float
        special:
          type: boolean
        text:
          type: string
    ChatCompletionTool:
      required:
        - type
        - function
      type: object
      properties:
        function:
          required:
            - name
          type: object
          properties:
            description:
              type: string
            name:
              type: string
            parameters:
              type: object
        type:
          enum:
            - function
          type: string
    ChatCompletionToolMessageParam:
      required:
        - role
        - content
        - tool_call_id
      type: object
      properties:
        content:
          type: string
        role:
          enum:
            - tool
          type: string
        tool_call_id:
          type: string
    ChatCompletionUserMessageParam:
      required:
        - content
        - role
      type: object
      properties:
        content:
          type: string
        name:
          type: string
        role:
          enum:
            - user
          type: string
    CompletionChoice:
      required:
        - index
      type: object
      properties:
        text:
          type: string
    CompletionChoicesData:
      type: array
      items:
        type: object
        properties:
          finish_reason:
            $ref: '#/components/schemas/FinishReason'
          logprobs:
            $ref: '#/components/schemas/LogprobsPart'
          seed:
            type: integer
          text:
            type: string
            example: 'The capital of France is Paris. It''s located in the north-central part of the country and is one of the most populous and visited cities in the world, known for its iconic landmarks like the Eiffel Tower, Louvre Museum, Notre-Dame Cathedral, and more. Paris is also the capital of the Île-de-France region and is a major global center for art, fashion, gastronomy, and culture.'
    CompletionChunk:
      required:
        - id
        - token
        - choices
        - usage
        - finish_reason
      type: object
      properties:
        choices:
          title: CompletionChoices
          type: array
          items:
            $ref: '#/components/schemas/CompletionChoice'
        finish_reason:
          $ref: '#/components/schemas/FinishReason'
        id:
          type: string
        seed:
          type: integer
        token:
          $ref: '#/components/schemas/CompletionToken'
        usage:
          $ref: '#/components/schemas/UsageData'
    CompletionEvent:
      required:
        - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/CompletionChunk'
    CompletionRequest:
      required:
        - model
        - prompt
      type: object
      properties:
        echo:
          type: boolean
          description: 'If true, the response will contain the prompt. Can be used with `logprobs` to return prompt logprobs.'
        frequency_penalty:
          type: number
          description: A number between -2.0 and 2.0 where a positive value decreases the likelihood of repeating tokens that have already been mentioned.
          format: float
        logit_bias:
          type: object
          additionalProperties:
            type: number
            format: float
          description: Adjusts the likelihood of specific tokens appearing in the generated output.
          example:
            '1024': -10.5
            '105': 21.4
        logprobs:
          maximum: 1
          minimum: 0
          type: integer
          description: Determines the number of most likely tokens to return at each token position log probabilities to return.
        max_tokens:
          type: integer
          description: The maximum number of tokens to generate.
        min_p:
          type: number
          description: A number between 0 and 1 that can be used as an alternative to top-p and top-k.
          format: float
        model:
          type: string
          anyOf:
            - enum:
                - meta-llama/Llama-2-70b-hf
                - mistralai/Mistral-7B-v0.1
                - mistralai/Mixtral-8x7B-v0.1
                - Meta-Llama/Llama-Guard-7b
              type: string
            - type: string
          description: "The name of the model to query.<br> <br> [See all of Together AI's chat models](https://docs.together.ai/docs/serverless-models#chat-models)\n"
          example: mistralai/Mixtral-8x7B-Instruct-v0.1
        n:
          maximum: 128
          minimum: 1
          type: integer
          description: The number of completions to generate for each prompt.
        presence_penalty:
          type: number
          description: A number between -2.0 and 2.0 where a positive value increases the likelihood of a model talking about new topics.
          format: float
        prompt:
          type: string
          description: A string providing context for the model to complete.
          example: '<s>[INST] What is the capital of France? [/INST]'
        repetition_penalty:
          type: number
          description: A number that controls the diversity of generated text by reducing the likelihood of repeated sequences. Higher values decrease repetition.
          format: float
        safety_model:
          type: string
          anyOf:
            - enum:
                - Meta-Llama/Llama-Guard-7b
              type: string
            - type: string
          description: 'The name of the moderation model used to validate tokens. Choose from the available moderation models found [here](https://docs.together.ai/docs/inference-models#moderation-models).'
          example: safety_model_name
        seed:
          type: integer
          description: Seed value for reproducibility.
          example: 42
        stop:
          type: array
          items:
            type: string
          description: 'A list of string sequences that will truncate (stop) inference text output. For example, "</s>" will stop generation as soon as the model generates the given token.'
        stream:
          type: boolean
          description: 'If true, stream tokens as Server-Sent Events as the model generates them instead of waiting for the full model response. The stream terminates with `data: [DONE]`. If false, return a single JSON object containing the results.'
        temperature:
          type: number
          description: A decimal number from 0-1 that determines the degree of randomness in the response. A temperature less than 1 favors more correctness and is appropriate for question answering or summarization. A value closer to 1 introduces more randomness in the output.
          format: float
        top_k:
          type: integer
          description: 'An integer that''s used to limit the number of choices for the next predicted word or token. It specifies the maximum number of tokens to consider at each step, based on their probability of occurrence. This technique helps to speed up the generation process and can improve the quality of the generated text by focusing on the most likely options.'
          format: int32
        top_p:
          type: number
          description: A percentage (also called the nucleus parameter) that's used to dynamically adjust the number of choices for each predicted token based on the cumulative probabilities. It specifies a probability threshold below which all less likely tokens are filtered out. This technique helps maintain diversity and generate more fluent and natural-sounding text.
          format: float
    CompletionResponse:
      required:
        - id
        - choices
        - usage
        - created
        - model
        - object
      type: object
      properties:
        choices:
          $ref: '#/components/schemas/CompletionChoicesData'
        created:
          type: integer
        id:
          type: string
        model:
          type: string
        object:
          enum:
            - text_completion
          type: string
        prompt:
          $ref: '#/components/schemas/PromptPart'
        usage:
          $ref: '#/components/schemas/UsageData'
    CompletionStream:
      oneOf:
        - $ref: '#/components/schemas/CompletionEvent'
        - $ref: '#/components/schemas/StreamSentinel'
    CompletionToken:
      required:
        - id
        - text
        - logprob
        - special
      type: object
      properties:
        id:
          type: integer
        logprob:
          type: number
        special:
          type: boolean
        text:
          type: string
    EmbeddingsRequest:
      required:
        - model
        - input
      type: object
      properties:
        input:
          oneOf:
            - type: string
              description: A string providing the text for the model to embed.
              example: 'Our solar system orbits the Milky Way galaxy at about 515,000 mph'
            - type: array
              items:
                type: string
                description: A string providing the text for the model to embed.
                example: 'Our solar system orbits the Milky Way galaxy at about 515,000 mph'
          example: 'Our solar system orbits the Milky Way galaxy at about 515,000 mph'
        model:
          type: string
          anyOf:
            - enum:
                - WhereIsAI/UAE-Large-V1
                - BAAI/bge-large-en-v1.5
                - BAAI/bge-base-en-v1.5
                - togethercomputer/m2-bert-80M-8k-retrieval
              type: string
            - type: string
          description: "The name of the embedding model to use.<br> <br> [See all of Together AI's embedding models](https://docs.together.ai/docs/serverless-models#embedding-models)\n"
          example: togethercomputer/m2-bert-80M-8k-retrieval
    EmbeddingsResponse:
      required:
        - object
        - model
        - data
      type: object
      properties:
        data:
          type: array
          items:
            required:
              - index
              - object
              - embedding
            type: object
            properties:
              embedding:
                type: array
                items:
                  type: number
              index:
                type: integer
              object:
                enum:
                  - embedding
                type: string
        model:
          type: string
        object:
          enum:
            - list
          type: string
    ErrorData:
      required:
        - error
      type: object
      properties:
        error:
          required:
            - type
            - message
            - param
            - code
          type: object
          properties:
            code:
              type: string
              default: 
              nullable: true
            message:
              type: string
            param:
              type: string
              default: 
              nullable: true
            type:
              type: string
    FileDeleteResponse:
      type: object
      properties:
        deleted:
          type: boolean
        id:
          type: string
    FileList:
      required:
        - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/FileResponse'
    FileObject:
      type: object
      properties:
        filename:
          type: string
        id:
          type: string
        object:
          type: string
        size:
          type: integer
    FileResponse:
      required:
        - id
        - object
        - created_at
        - filename
        - bytes
        - purpose
        - FileType
        - Processed
        - LineCount
      type: object
      properties:
        FileType:
          enum:
            - jsonl
            - parquet
          example: jsonl
        LineCount:
          type: integer
        Processed:
          type: boolean
        bytes:
          type: integer
          example: 2664
        created_at:
          type: integer
          example: 1715021438
        filename:
          type: string
          example: my_file.jsonl
        id:
          type: string
        object:
          type: string
          example: file
        purpose:
          enum:
            - fine-tune
          example: fine-tune
    FineTuneEvent:
      required:
        - object
        - created_at
        - message
        - type
        - param_count
        - token_count
        - total_steps
        - wandb_url
        - step
        - checkpoint_path
        - model_path
        - training_offset
        - hash
      type: object
      properties:
        checkpoint_path:
          type: string
        created_at:
          type: string
        hash:
          type: string
        level:
          enum:
            - info
            - warning
            - error
            - legacy_info
            - legacy_iwarning
            - legacy_ierror
          type: string
          nullable: true
        message:
          type: string
        model_path:
          type: string
        object:
          enum:
            - fine-tune-event
          type: string
        param_count:
          type: integer
        step:
          type: integer
        token_count:
          type: integer
        total_steps:
          type: integer
        training_offset:
          type: integer
        type:
          enum:
            - job_pending
            - job_start
            - job_stopped
            - model_downloading
            - model_download_complete
            - training_data_downloading
            - training_data_download_complete
            - validation_data_downloading
            - validation_data_download_complete
            - wandb_init
            - training_start
            - checkpoint_save
            - billing_limit
            - epoch_complete
            - training_complete
            - model_compressing
            - model_compression_complete
            - model_uploading
            - model_upload_complete
            - job_complete
            - job_error
            - cancel_requested
            - job_restarted
            - refund
            - warning
          type: string
        wandb_url:
          type: string
    FinetuneDownloadResult:
      type: object
      properties:
        checkpoint_step:
          type: integer
        filename:
          type: string
        id:
          type: string
        object:
          enum:
            - local
          nullable: true
        size:
          type: integer
    FinetuneEvent:
      type: object
      properties:
        created_at:
          type: string
        hash:
          type: string
        level:
          anyOf:
            - $ref: '#/components/schemas/FinetuneEventLevels'
        message:
          type: string
        object:
          enum:
            - FinetuneEvent
          type: string
        param_count:
          type: integer
        token_count:
          type: integer
        type:
          $ref: '#/components/schemas/FinetuneEventType'
        wandb_url:
          type: string
    FinetuneEventLevels:
      enum:
        - info
        - warning
        - error
        - legacy_info
        - legacy_iwarning
        - legacy_ierror
      type: string
      nullable: true
    FinetuneEventType:
      enum:
        - job_pending
        - job_start
        - job_stopped
        - model_downloading
        - model_download_complete
        - training_data_downloading
        - training_data_download_complete
        - validation_data_downloading
        - validation_data_download_complete
        - wandb_init
        - training_start
        - checkpoint_save
        - billing_limit
        - epoch_complete
        - training_complete
        - model_compressing
        - model_compression_complete
        - model_uploading
        - model_upload_complete
        - job_complete
        - job_error
        - cancel_requested
        - job_restarted
        - refund
        - warning
      type: string
    FinetuneJobStatus:
      enum:
        - pending
        - queued
        - running
        - compressing
        - uploading
        - cancel_requested
        - cancelled
        - error
        - completed
      type: string
    FinetuneList:
      required:
        - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/FinetuneResponse'
    FinetuneListEvents:
      required:
        - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/FineTuneEvent'
    FinetuneResponse:
      required:
        - id
        - status
      type: object
      properties:
        batch_size:
          type: integer
        created_at:
          type: string
        epochs_completed:
          type: integer
        eval_steps:
          type: integer
        events:
          type: array
          items:
            $ref: '#/components/schemas/FinetuneEvent'
        id:
          type: string
          format: uuid
        job_id:
          type: string
        learning_rate:
          type: number
        lr_scheduler:
          $ref: '#/components/schemas/LRScheduler'
        max_grad_norm:
          type: number
          format: float
        model:
          type: string
        model_output_name:
          type: string
        model_output_path:
          type: string
        n_checkpoints:
          type: integer
        n_epochs:
          type: integer
        n_evals:
          type: integer
        param_count:
          type: integer
        queue_depth:
          type: integer
        status:
          $ref: '#/components/schemas/FinetuneJobStatus'
        token_count:
          type: integer
        total_price:
          type: integer
        train_on_inputs:
          oneOf:
            - type: boolean
            - enum:
                - auto
              type: string
          default: auto
        training_file:
          type: string
        training_type:
          type: object
          oneOf:
            - $ref: '#/components/schemas/FullTrainingType'
            - $ref: '#/components/schemas/LoRATrainingType'
        trainingfile_numlines:
          type: integer
        trainingfile_size:
          type: integer
        updated_at:
          type: string
        validation_file:
          type: string
        wandb_project_name:
          type: string
        wandb_url:
          type: string
        warmup_ratio:
          type: number
        weight_decay:
          type: number
          format: float
    FinishReason:
      enum:
        - stop
        - eos
        - length
        - tool_calls
        - function_call
      type: string
    FullTrainingType:
      required:
        - type
      type: object
      properties:
        type:
          enum:
            - Full
          type: string
    ImageResponse:
      required:
        - id
        - model
        - object
        - data
      type: object
      properties:
        data:
          type: array
          items:
            required:
              - index
            type: object
            oneOf:
              - required:
                  - b64_json
              - required:
                  - url
            properties:
              b64_json:
                type: string
              index:
                type: integer
              url:
                type: string
        id:
          type: string
        model:
          type: string
        object:
          enum:
            - list
          example: list
    LRScheduler:
      required:
        - lr_scheduler_type
      type: object
      properties:
        lr_scheduler_args:
          $ref: '#/components/schemas/LinearLRSchedulerArgs'
        lr_scheduler_type:
          type: string
    LinearLRSchedulerArgs:
      type: object
      properties:
        min_lr_ratio:
          type: number
          description: The ratio of the final learning rate to the peak learning rate
          format: float
          default: 0
    LoRATrainingType:
      required:
        - type
        - lora_r
        - lora_alpha
      type: object
      properties:
        lora_alpha:
          type: integer
        lora_dropout:
          type: number
          format: float
          default: 0
        lora_r:
          type: integer
        lora_trainable_modules:
          type: string
          default: all-linear
        type:
          enum:
            - Lora
          type: string
    LogprobsPart:
      type: object
      properties:
        token_ids:
          type: array
          items:
            type: number
          description: List of token IDs corresponding to the logprobs
        token_logprobs:
          type: array
          items:
            type: number
          description: List of token log probabilities
        tokens:
          type: array
          items:
            type: string
          description: List of token strings
    ModelInfo:
      required:
        - id
        - object
        - created
        - type
      type: object
      properties:
        context_length:
          type: integer
          example: 2048
        created:
          type: integer
          example: 1692896905
        display_name:
          type: string
          example: Chronos Hermes (13B)
        id:
          type: string
          example: Austism/chronos-hermes-13b
        license:
          type: string
          example: other
        link:
          type: string
        object:
          type: string
          example: model
        organization:
          type: string
          example: Austism
        pricing:
          $ref: '#/components/schemas/Pricing'
        type:
          enum:
            - chat
            - language
            - code
            - image
            - embedding
            - moderation
            - rerank
          example: chat
    ModelInfoList:
      type: array
      items:
        $ref: '#/components/schemas/ModelInfo'
    Pricing:
      required:
        - hourly
        - input
        - output
        - base
        - finetune
      type: object
      properties:
        base:
          type: number
          example: 0
        finetune:
          type: number
          example: 0
        hourly:
          type: number
          example: 0
        input:
          type: number
          example: 0.3
        output:
          type: number
          example: 0.3
    PromptPart:
      type: array
      items:
        type: object
        properties:
          logprobs:
            $ref: '#/components/schemas/LogprobsPart'
          text:
            type: string
            example: '<s>[INST] What is the capital of France? [/INST]'
    RerankRequest:
      required:
        - model
        - query
        - documents
      type: object
      properties:
        documents:
          oneOf:
            - type: array
              items:
                type: object
            - type: array
              items:
                type: string
                example: 'Our solar system orbits the Milky Way galaxy at about 515,000 mph'
          description: 'List of documents, which can be either strings or objects.'
          example:
            text: 'The llama is a domesticated South American camelid, widely used as a meat and pack animal by Andean cultures since the pre-Columbian era.'
            title: Llama
        model:
          type: string
          anyOf:
            - enum:
                - Salesforce/Llama-Rank-v1
              type: string
            - type: string
          description: "The model to be used for the rerank request.<br> <br> [See all of Together AI's rerank models](https://docs.together.ai/docs/serverless-models#rerank-models)\n"
          example: Salesforce/Llama-Rank-V1
        query:
          type: string
          description: The search query to be used for ranking.
          example: What animals can I find near Peru?
        rank_fields:
          type: array
          items:
            type: string
          description: List of keys in the JSON Object document to rank by. Defaults to use all supplied keys for ranking.
          example:
            - title
            - text
        return_documents:
          type: boolean
          description: Whether to return supplied documents with the response.
          example: true
        top_n:
          type: integer
          description: The number of top results to return.
          example: 2
      additionalProperties: false
    RerankResponse:
      required:
        - object
        - model
        - results
      type: object
      properties:
        id:
          type: string
          description: Request ID
          example: 9dfa1a09-5ebc-4a40-970f-586cb8f4ae47
        model:
          type: string
          description: The model to be used for the rerank request.
          example: salesforce/turboranker-0.8-3778-6328
        object:
          enum:
            - rerank
          type: string
          description: Object type
          example: rerank
        results:
          type: array
          items:
            required:
              - index
              - relevance_score
              - document
            type: object
            properties:
              document:
                type: object
                properties:
                  text:
                    type: string
                    nullable: true
              index:
                type: integer
              relevance_score:
                type: number
          example:
            - document:
                text: '{"title":"Llama","text":"The llama is a domesticated South American camelid, widely used as a meat and pack animal by Andean cultures since the pre-Columbian era."}'
              index: 0
              relevance_score: 0.29980177813003117
            - document:
                text: '{"title":"Guanaco","text":"The guanaco is a camelid native to South America, closely related to the llama. Guanacos are one of two wild South American camelids; the other species is the vicuña, which lives at higher elevations."}'
              index: 2
              relevance_score: 0.2752447527354349
        usage:
          $ref: '#/components/schemas/UsageData'
    StreamSentinel:
      required:
        - data
      type: object
      properties:
        data:
          title: stream_signal
          enum:
            - '[DONE]'
          type: string
    ToolChoice:
      required:
        - id
        - type
        - function
        - index
      type: object
      properties:
        function:
          required:
            - name
            - arguments
          type: object
          properties:
            arguments:
              type: string
            name:
              type: string
              example: function_name
        id:
          type: string
        index:
          type: number
        type:
          enum:
            - function
          type: string
    ToolsPart:
      type: object
      properties:
        function:
          type: object
          properties:
            description:
              type: string
              example: A description of the function.
            name:
              type: string
              example: function_name
            parameters:
              type: object
              description: A map of parameter names to their values.
        type:
          type: string
          example: tool_type
    UsageData:
      required:
        - prompt_tokens
        - completion_tokens
        - total_tokens
      type: object
      properties:
        completion_tokens:
          type: integer
        prompt_tokens:
          type: integer
        total_tokens:
          type: integer
      nullable: true
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      x-bearer-format: bearer
      x-default: default
security:
  - bearerAuth: [ ]